#!/usr/bin/env ruby

require_relative '../options'
require_relative '../lib/tiny_dialer'
require TinyDialer::MODEL_ROOT/:init
require TinyDialer::LIBROOT/:tiny_dialer/:hopper
require TinyDialer::LIBROOT/:tiny_dialer/:dialer
require "eventmachine"
require "fsr"
require "fsr/command_socket"
FSR.load_all_commands
require "tiny_dialer/tcc_helper"
TinyDialer::Log.level = Log4r.const_get(TinyDialer.options.dialer.log_level)

module TinyDialer
  class DialManager
    attr_reader :hopper, :host, :pass, :max_dials

    def initialize(o = {:dialers => 1, :host => '127.0.0.1', :pass => 'ClueCon'})
      @host         = o[:host] || '127.0.0.1'
      @pass         = o[:pass] || 'ClueCon'
      @proxy_server_fmt = o[:proxy_server_fmt] || 'loopback/%s/default/XML'
      @max_dials    = o[:max_dials] || 20

      TinyDialer::Log.info "DialManager initialized with #{max_dials} dialers"

      @hopper = TinyDialer::Hopper.create(:max_size => 100)
      @dialer = TinyDialer::Dialer.new(
        host: @host,
        pass: @pass,
        hopper: @hopper,
        proxy_server_fmt: @proxy_server_fmt
      )

      @interval = 5
      EM.add_timer(@interval, method(:timer_tick))
    end

    def current_dials
      dials = @dialer.es{|e| e.channels.run.select{|ch| ch.dest != "19999" }.size }
      TinyDialer::Log.debug "we show #{dials} currently dialing"
      dials
    end

    def ready_agents
      agents = if TinyDialer.options.direct_listener.tcc_root
        TCC_Helper.ready_agents(TinyDialer.options.dialer.transfer_queue).size
      else
        if row = TinyDialer.db[:dialer_pool].first
          row[:dialer_max]
        else
          max_dials
        end
      end
      TinyDialer::Log.debug("Ready Agents: #{agents}")
      agents
    end

    # how many dials should be made based on current calls and ready agents
    # Never aim for more than max_dials
    def dial_aim
      row = TinyDialer.db[:dialer_pool].first
      ratio = row[:ratio]

      [max_dials, (ready_agents - current_dials) * ratio].min
    end

    def timer_tick
      EM.defer do
        begin
          if dial
            TinyDialer::Log.debug "Interval to 0.05"
            @interval = 0.05
          else
            @interval = [10, @interval * 1.2].min
            TinyDialer::Log.debug "Interval to #{@interval}"
          end
        rescue Exception => ex
          TinyDialer::Log.error ex
        ensure
          EM.add_timer(@interval, method(:timer_tick))
        end
      end
    end

    def dial
      aim = dial_aim
      TinyDialer::Log.debug "Aim is #{aim}"

      if aim < 1
        old = @interval
        @interval = [7, @interval * 1.2].min

        if old == @interval
          return false
        else
          TinyDialer::Log.info "No more leads to load the hopper today"
          return false
        end
      else
        TinyDialer::Log.debug "Dialing"
        @dialer.dial
      end
    end
  end
end


options = TinyDialer.options.dialer


::EM.run do
  TinyDialer::Log.info "Proxy Server: #{options.proxy_server_fmt}"
  TinyDialer::Log.info "Max Dials: #{options.max_dials}"
  TinyDialer::DialManager.new(
    proxy_server_fmt: options.proxy_server_fmt,
    max_dials: options.max_dials,
    host: options.dial_server
  )
end
